<?xml version="1.0" encoding="ISO-8859-1"?>
<definitions xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tns="urn:ilUserAdministration" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" targetNamespace="urn:ilUserAdministration">
<types>
<xsd:schema targetNamespace="urn:ilUserAdministration"
>
 <xsd:import namespace="http://schemas.xmlsoap.org/soap/encoding/" />
 <xsd:import namespace="http://schemas.xmlsoap.org/wsdl/" />
 <xsd:complexType name="intArray">
  <xsd:complexContent>
   <xsd:restriction base="SOAP-ENC:Array">
    <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xsd:int[]"/>
   </xsd:restriction>
  </xsd:complexContent>
 </xsd:complexType>
 <xsd:complexType name="stringArray">
  <xsd:complexContent>
   <xsd:restriction base="SOAP-ENC:Array">
    <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xsd:string[]"/>
   </xsd:restriction>
  </xsd:complexContent>
 </xsd:complexType>
 <xsd:complexType name="doubleArray">
  <xsd:complexContent>
   <xsd:restriction base="SOAP-ENC:Array">
    <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xsd:double[]"/>
   </xsd:restriction>
  </xsd:complexContent>
 </xsd:complexType>
 <xsd:complexType name="ilUserData">
  <xsd:all>
   <xsd:element name="usr_id" type="xsd:int"/>
   <xsd:element name="login" type="xsd:string"/>
   <xsd:element name="passwd" type="xsd:string"/>
   <xsd:element name="firstname" type="xsd:string"/>
   <xsd:element name="lastname" type="xsd:string"/>
   <xsd:element name="title" type="xsd:string"/>
   <xsd:element name="gender" type="xsd:string"/>
   <xsd:element name="email" type="xsd:string"/>
   <xsd:element name="institution" type="xsd:string"/>
   <xsd:element name="street" type="xsd:string"/>
   <xsd:element name="city" type="xsd:string"/>
   <xsd:element name="zipcode" type="xsd:string"/>
   <xsd:element name="country" type="xsd:string"/>
   <xsd:element name="phone_office" type="xsd:string"/>
   <xsd:element name="last_login" type="xsd:string"/>
   <xsd:element name="last_update" type="xsd:string"/>
   <xsd:element name="create_date" type="xsd:string"/>
   <xsd:element name="hobby" type="xsd:string"/>
   <xsd:element name="department" type="xsd:string"/>
   <xsd:element name="phone_home" type="xsd:string"/>
   <xsd:element name="phone_mobile" type="xsd:string"/>
   <xsd:element name="fax" type="xsd:string"/>
   <xsd:element name="time_limit_owner" type="xsd:int"/>
   <xsd:element name="time_limit_unlimited" type="xsd:int"/>
   <xsd:element name="time_limit_from" type="xsd:int"/>
   <xsd:element name="time_limit_until" type="xsd:int"/>
   <xsd:element name="time_limit_message" type="xsd:int"/>
   <xsd:element name="referral_comment" type="xsd:string"/>
   <xsd:element name="matriculation" type="xsd:string"/>
   <xsd:element name="active" type="xsd:int"/>
   <xsd:element name="accepted_agreement" type="xsd:boolean"/>
   <xsd:element name="approve_date" type="xsd:string"/>
   <xsd:element name="user_skin" type="xsd:string"/>
   <xsd:element name="user_style" type="xsd:string"/>
   <xsd:element name="user_language" type="xsd:string"/>
   <xsd:element name="import_id" type="xsd:string"/>
  </xsd:all>
 </xsd:complexType>
 <xsd:complexType name="ilOperation">
  <xsd:all>
   <xsd:element name="ops_id" type="xsd:int"/>
   <xsd:element name="operation" type="xsd:string"/>
   <xsd:element name="description" type="xsd:string"/>
  </xsd:all>
 </xsd:complexType>
 <xsd:complexType name="ilOperations">
  <xsd:complexContent>
   <xsd:restriction base="SOAP-ENC:Array">
    <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="tns:ilOperation[]"/>
   </xsd:restriction>
  </xsd:complexContent>
 </xsd:complexType>
 <xsd:complexType name="ilOperationIds">
  <xsd:complexContent>
   <xsd:restriction base="SOAP-ENC:Array">
    <xsd:attribute ref="SOAP-ENC:arrayType" wsdl:arrayType="xsd:int[]"/>
   </xsd:restriction>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:schema>
</types>
<message name="loginRequest">
  <part name="client" type="xsd:string" />
  <part name="username" type="xsd:string" />
  <part name="password" type="xsd:string" /></message>
<message name="loginResponse">
  <part name="sid" type="xsd:string" /></message>
<message name="loginCASRequest">
  <part name="client" type="xsd:string" />
  <part name="PT" type="xsd:string" />
  <part name="user" type="xsd:string" /></message>
<message name="loginCASResponse">
  <part name="sid" type="xsd:string" /></message>
<message name="loginLDAPRequest">
  <part name="client" type="xsd:string" />
  <part name="username" type="xsd:string" />
  <part name="password" type="xsd:string" /></message>
<message name="loginLDAPResponse">
  <part name="sid" type="xsd:string" /></message>
<message name="logoutRequest">
  <part name="sid" type="xsd:string" /></message>
<message name="logoutResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="lookupUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_name" type="xsd:string" /></message>
<message name="lookupUserResponse">
  <part name="usr_id" type="xsd:int" /></message>
<message name="getUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getUserResponse">
  <part name="user_data" type="tns:ilUserData" /></message>
<message name="updateUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_data" type="tns:ilUserData" /></message>
<message name="updateUserResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="updatePasswordRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" />
  <part name="new_password" type="xsd:string" /></message>
<message name="updatePasswordResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="addUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_data" type="tns:ilUserData" />
  <part name="global_role_id" type="xsd:int" /></message>
<message name="addUserResponse">
  <part name="user_id" type="xsd:int" /></message>
<message name="deleteUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" /></message>
<message name="deleteUserResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="addCourseRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="crs_xml" type="xsd:string" /></message>
<message name="addCourseResponse">
  <part name="course_id" type="xsd:int" /></message>
<message name="deleteCourseRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" /></message>
<message name="deleteCourseResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="assignCourseMemberRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" />
  <part name="type" type="xsd:string" /></message>
<message name="assignCourseMemberResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="excludeCourseMemberRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="excludeCourseMemberResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="isAssignedToCourseRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="isAssignedToCourseResponse">
  <part name="role" type="xsd:int" /></message>
<message name="getCourseXMLRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" /></message>
<message name="getCourseXMLResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="updateCourseRequest">
  <part name="sid" type="xsd:string" />
  <part name="course_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="updateCourseResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getObjIdByImportIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="import_id" type="xsd:string" /></message>
<message name="getObjIdByImportIdResponse">
  <part name="obj_id" type="xsd:int" /></message>
<message name="getRefIdsByImportIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="import_id" type="xsd:string" /></message>
<message name="getRefIdsByImportIdResponse">
  <part name="ref_ids" type="tns:intArray" /></message>
<message name="getRefIdsByObjIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="obj_id" type="xsd:string" /></message>
<message name="getRefIdsByObjIdResponse">
  <part name="ref_ids" type="tns:intArray" /></message>
<message name="getObjectByReferenceRequest">
  <part name="sid" type="xsd:string" />
  <part name="reference_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getObjectByReferenceResponse">
  <part name="object_xml" type="xsd:string" /></message>
<message name="getObjectsByTitleRequest">
  <part name="sid" type="xsd:string" />
  <part name="title" type="xsd:string" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getObjectsByTitleResponse">
  <part name="object_xml" type="xsd:string" /></message>
<message name="searchObjectsRequest">
  <part name="sid" type="xsd:string" />
  <part name="types" type="tns:stringArray" />
  <part name="key" type="xsd:string" />
  <part name="combination" type="xsd:string" />
  <part name="user_id" type="xsd:int" /></message>
<message name="searchObjectsResponse">
  <part name="object_xml" type="xsd:string" /></message>
<message name="getTreeChildsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="types" type="tns:stringArray" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getTreeChildsResponse">
  <part name="object_xml" type="xsd:string" /></message>
<message name="getXMLTreeRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="types" type="tns:stringArray" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getXMLTreeResponse">
  <part name="object_xml" type="xsd:string" /></message>
<message name="addObjectRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="object_xml" type="xsd:string" /></message>
<message name="addObjectResponse">
  <part name="ref_id" type="xsd:int" /></message>
<message name="updateObjectsRequest">
  <part name="sid" type="xsd:string" />
  <part name="object_xml" type="xsd:string" /></message>
<message name="updateObjectsResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="addReferenceRequest">
  <part name="sid" type="xsd:string" />
  <part name="source_id" type="xsd:int" />
  <part name="target_id" type="xsd:int" /></message>
<message name="addReferenceResponse">
  <part name="ref_id" type="xsd:int" /></message>
<message name="deleteObjectRequest">
  <part name="sid" type="xsd:string" />
  <part name="reference_id" type="xsd:int" /></message>
<message name="deleteObjectResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="removeFromSystemByImportIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="import_id" type="xsd:string" /></message>
<message name="removeFromSystemByImportIdResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="addUserRoleEntryRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" />
  <part name="role_id" type="xsd:int" /></message>
<message name="addUserRoleEntryResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="deleteUserRoleEntryRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" />
  <part name="role_id" type="xsd:int" /></message>
<message name="deleteUserRoleEntryResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getOperationsRequest">
  <part name="sid" type="xsd:string" /></message>
<message name="getOperationsResponse">
  <part name="operations" type="tns:ilOperations" /></message>
<message name="revokePermissionsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="role_id" type="xsd:int" /></message>
<message name="revokePermissionsResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="grantPermissionsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="role_id" type="xsd:int" />
  <part name="operations" type="tns:intArray" /></message>
<message name="grantPermissionsResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getLocalRolesRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getLocalRolesResponse">
  <part name="role_xml" type="xsd:string" /></message>
<message name="getUserRolesRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getUserRolesResponse">
  <part name="role_xml" type="xsd:string" /></message>
<message name="addRoleRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="obj_xml" type="xsd:string" /></message>
<message name="addRoleResponse">
  <part name="role_ids" type="tns:intArray" /></message>
<message name="deleteRoleRequest">
  <part name="sid" type="xsd:string" />
  <part name="role_id" type="xsd:int" /></message>
<message name="deleteRoleResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="addRoleFromTemplateRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="obj_xml" type="xsd:string" />
  <part name="role_template_id" type="xsd:int" /></message>
<message name="addRoleFromTemplateResponse">
  <part name="role_ids" type="tns:intArray" /></message>
<message name="getObjectTreeOperationsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="getObjectTreeOperationsResponse">
  <part name="operations" type="tns:ilOperations" /></message>
<message name="addGroupRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="group_xml" type="xsd:string" /></message>
<message name="addGroupResponse">
  <part name="ref_id" type="xsd:int" /></message>
<message name="groupExistsRequest">
  <part name="sid" type="xsd:string" />
  <part name="title" type="xsd:string" /></message>
<message name="groupExistsResponse">
  <part name="exists" type="xsd:boolean" /></message>
<message name="getGroupRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getGroupResponse">
  <part name="group_xml" type="xsd:string" /></message>
<message name="assignGroupMemberRequest">
  <part name="sid" type="xsd:string" />
  <part name="group_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" />
  <part name="type" type="xsd:string" /></message>
<message name="assignGroupMemberResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="excludeGroupMemberRequest">
  <part name="sid" type="xsd:string" />
  <part name="group_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="excludeGroupMemberResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="isAssignedToGroupRequest">
  <part name="sid" type="xsd:string" />
  <part name="group_id" type="xsd:int" />
  <part name="user_id" type="xsd:int" /></message>
<message name="isAssignedToGroupResponse">
  <part name="role" type="xsd:int" /></message>
<message name="sendMailRequest">
  <part name="sid" type="xsd:string" />
  <part name="rcp_to" type="xsd:string" />
  <part name="rcp_cc" type="xsd:string" />
  <part name="rcp_bcc" type="xsd:string" />
  <part name="sender" type="xsd:string" />
  <part name="subject" type="xsd:string" />
  <part name="message" type="xsd:string" />
  <part name="attachments" type="xsd:string" /></message>
<message name="sendMailResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="distributeMailsRequest">
  <part name="sid" type="xsd:string" />
  <part name="mail_xml" type="xsd:string" /></message>
<message name="distributeMailsResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="ilCloneRequest">
  <part name="sid" type="xsd:string" />
  <part name="copy_identifier" type="xsd:int" /></message>
<message name="ilCloneResponse">
  <part name="new_ref_id" type="xsd:int" /></message>
<message name="handleECSTasksRequest">
  <part name="sid" type="xsd:string" />
  <part name="server_id" type="xsd:int" /></message>
<message name="handleECSTasksResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="ilCloneDependenciesRequest">
  <part name="sid" type="xsd:string" />
  <part name="copy_identifier" type="xsd:int" /></message>
<message name="ilCloneDependenciesResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="saveQuestionResultRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:int" />
  <part name="test_id" type="xsd:int" />
  <part name="question_id" type="xsd:int" />
  <part name="pass" type="xsd:int" />
  <part name="solution" type="tns:stringArray" /></message>
<message name="saveQuestionResultResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="saveQuestionRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="question_id" type="xsd:long" />
  <part name="pass" type="xsd:int" />
  <part name="solution" type="tns:stringArray" /></message>
<message name="saveQuestionResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="saveQuestionSolutionRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="question_id" type="xsd:long" />
  <part name="pass" type="xsd:int" />
  <part name="solution" type="xsd:string" /></message>
<message name="saveQuestionSolutionResponse">
  <part name="status" type="xsd:string" /></message>
<message name="getQuestionSolutionRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="question_id" type="xsd:int" />
  <part name="pass" type="xsd:int" /></message>
<message name="getQuestionSolutionResponse">
  <part name="solution" type="tns:stringArray" /></message>
<message name="getTestUserDataRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" /></message>
<message name="getTestUserDataResponse">
  <part name="userdata" type="tns:stringArray" /></message>
<message name="getPositionOfQuestionRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="question_id" type="xsd:int" />
  <part name="pass" type="xsd:int" /></message>
<message name="getPositionOfQuestionResponse">
  <part name="position" type="xsd:int" /></message>
<message name="getPreviousReachedPointsRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="question_id" type="xsd:int" />
  <part name="pass" type="xsd:int" /></message>
<message name="getPreviousReachedPointsResponse">
  <part name="position" type="tns:doubleArray" /></message>
<message name="getNrOfQuestionsInPassRequest">
  <part name="sid" type="xsd:string" />
  <part name="active_id" type="xsd:long" />
  <part name="pass" type="xsd:int" /></message>
<message name="getNrOfQuestionsInPassResponse">
  <part name="count" type="xsd:int" /></message>
<message name="getStructureObjectsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getStructureObjectsResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="importUsersRequest">
  <part name="sid" type="xsd:string" />
  <part name="folder_id" type="xsd:int" />
  <part name="usr_xml" type="xsd:string" />
  <part name="conflict_rule" type="xsd:int" />
  <part name="send_account_mail" type="xsd:int" /></message>
<message name="importUsersResponse">
  <part name="protocol" type="xsd:string" /></message>
<message name="getRolesRequest">
  <part name="sid" type="xsd:string" />
  <part name="role_type" type="xsd:string" />
  <part name="id" type="xsd:string" /></message>
<message name="getRolesResponse">
  <part name="role_xml" type="xsd:string" /></message>
<message name="getUsersForContainerRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="attach_roles" type="xsd:int" />
  <part name="active" type="xsd:int" /></message>
<message name="getUsersForContainerResponse">
  <part name="user_xml" type="xsd:string" /></message>
<message name="getUsersForRoleRequest">
  <part name="sid" type="xsd:string" />
  <part name="role_id" type="xsd:int" />
  <part name="attach_roles" type="xsd:int" />
  <part name="active" type="xsd:int" /></message>
<message name="getUsersForRoleResponse">
  <part name="user_xml" type="xsd:string" /></message>
<message name="searchUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="key_fields" type="tns:stringArray" />
  <part name="query_operator" type="xsd:string" />
  <part name="key_values" type="tns:stringArray" />
  <part name="attach_roles" type="xsd:int" />
  <part name="active" type="xsd:int" /></message>
<message name="searchUserResponse">
  <part name="user_xml" type="xsd:string" /></message>
<message name="hasNewMailRequest">
  <part name="sid" type="xsd:string" /></message>
<message name="hasNewMailResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="getNICRequest">
  <part name="sid" type="xsd:string" /></message>
<message name="getNICResponse">
  <part name="xmlresultset" type="xsd:string" /></message>
<message name="getExerciseXMLRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="attachment_mode" type="xsd:int" /></message>
<message name="getExerciseXMLResponse">
  <part name="exercisexml" type="xsd:string" /></message>
<message name="addExerciseRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="addExerciseResponse">
  <part name="refid" type="xsd:int" /></message>
<message name="updateExerciseRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="updateExerciseResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getFileXMLRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="attachment_mode" type="xsd:int" /></message>
<message name="getFileXMLResponse">
  <part name="filexml" type="xsd:string" /></message>
<message name="addFileRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="addFileResponse">
  <part name="refid" type="xsd:int" /></message>
<message name="updateFileRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="updateFileResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getUserXMLRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_ids" type="tns:intArray" />
  <part name="attach_roles" type="xsd:int" /></message>
<message name="getUserXMLResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getObjIdsByRefIdsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_ids" type="tns:intArray" /></message>
<message name="getObjIdsByRefIdsResponse">
  <part name="obj_ids" type="tns:intArray" /></message>
<message name="updateGroupRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="updateGroupResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getIMSManifestXMLRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getIMSManifestXMLResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="hasSCORMCertificateRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="usr_id" type="xsd:int" /></message>
<message name="hasSCORMCertificateResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getSCORMCompletionStatusRequest">
  <part name="sid" type="xsd:string" />
  <part name="usr_id" type="xsd:int" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getSCORMCompletionStatusResponse">
  <part name="status" type="xsd:string" /></message>
<message name="copyObjectRequest">
  <part name="sid" type="xsd:string" />
  <part name="xml" type="xsd:string" /></message>
<message name="copyObjectResponse">
  <part name="xml" type="xsd:int" /></message>
<message name="moveObjectRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="target_id" type="xsd:int" /></message>
<message name="moveObjectResponse">
  <part name="result" type="xsd:boolean" /></message>
<message name="getTestResultsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="sum_only" type="xsd:boolean" /></message>
<message name="getTestResultsResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="removeTestResultsRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="user_ids" type="tns:intArray" /></message>
<message name="removeTestResultsResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getCoursesForUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="parameters" type="xsd:string" /></message>
<message name="getCoursesForUserResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getGroupsForUserRequest">
  <part name="sid" type="xsd:string" />
  <part name="parameters" type="xsd:string" /></message>
<message name="getGroupsForUserResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getPathForRefIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="getPathForRefIdResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="searchRolesRequest">
  <part name="sid" type="xsd:string" />
  <part name="key" type="xsd:string" />
  <part name="combination" type="xsd:string" />
  <part name="role_type" type="xsd:string" /></message>
<message name="searchRolesResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getInstallationInfoXMLRequest"></message>
<message name="getInstallationInfoXMLResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getClientInfoXMLRequest">
  <part name="clientid" type="xsd:string" /></message>
<message name="getClientInfoXMLResponse">
  <part name="xml" type="xsd:string" /></message>
<message name="getSkillCompletionDateForTriggerRefIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:string" />
  <part name="ref_id" type="xsd:string" /></message>
<message name="getSkillCompletionDateForTriggerRefIdResponse">
  <part name="dates" type="xsd:string" /></message>
<message name="checkSkillUserCertificateForTriggerRefIdRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:string" />
  <part name="ref_id" type="xsd:string" /></message>
<message name="checkSkillUserCertificateForTriggerRefIdResponse">
  <part name="have_certificates" type="xsd:string" /></message>
<message name="getSkillTriggerOfAllCertificatesRequest">
  <part name="sid" type="xsd:string" />
  <part name="user_id" type="xsd:string" /></message>
<message name="getSkillTriggerOfAllCertificatesResponse">
  <part name="certificate_triggers" type="xsd:string" /></message>
<message name="getUserIdBySidRequest">
  <part name="sid" type="xsd:string" /></message>
<message name="getUserIdBySidResponse">
  <part name="usr_id" type="xsd:int" /></message>
<message name="deleteExpiredDualOptInUserObjectsRequest">
  <part name="sid" type="xsd:string" />
  <part name="usr_id" type="xsd:int" /></message>
<message name="deleteExpiredDualOptInUserObjectsResponse">
  <part name="status" type="xsd:boolean" /></message>
<message name="readWebLinkRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" /></message>
<message name="readWebLinkResponse">
  <part name="weblinkxml" type="xsd:string" /></message>
<message name="createWebLinkRequest">
  <part name="sid" type="xsd:string" />
  <part name="target_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="createWebLinkResponse">
  <part name="refid" type="xsd:int" /></message>
<message name="updateWebLinkRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_id" type="xsd:int" />
  <part name="xml" type="xsd:string" /></message>
<message name="updateWebLinkResponse">
  <part name="success" type="xsd:boolean" /></message>
<message name="getLearningProgressChangesRequest">
  <part name="sid" type="xsd:string" />
  <part name="timestamp" type="xsd:string" />
  <part name="include_ref_ids" type="xsd:boolean" />
  <part name="type_filter" type="tns:stringArray" /></message>
<message name="getLearningProgressChangesResponse">
  <part name="lp_data" type="xsd:string" /></message>
<message name="deleteProgressRequest">
  <part name="sid" type="xsd:string" />
  <part name="ref_ids" type="tns:intArray" />
  <part name="usr_ids" type="tns:intArray" />
  <part name="type_filter" type="tns:stringArray" />
  <part name="progress_filter" type="tns:intArray" /></message>
<message name="deleteProgressResponse">
  <part name="status" type="xsd:boolean" /></message>
<portType name="ILIASSoapWebservicePortType">
  <operation name="login">
    <documentation>ILIAS login function</documentation>
    <input message="tns:loginRequest"/>
    <output message="tns:loginResponse"/>
  </operation>
  <operation name="loginCAS">
    <documentation>ILIAS login function via CAS</documentation>
    <input message="tns:loginCASRequest"/>
    <output message="tns:loginCASResponse"/>
  </operation>
  <operation name="loginLDAP">
    <documentation>ILIAS login function via LDAP</documentation>
    <input message="tns:loginLDAPRequest"/>
    <output message="tns:loginLDAPResponse"/>
  </operation>
  <operation name="logout">
    <documentation>ILIAS logout function</documentation>
    <input message="tns:logoutRequest"/>
    <output message="tns:logoutResponse"/>
  </operation>
  <operation name="lookupUser">
    <documentation>ILIAS lookupUser(): check if username exists. Return usr_id or 0 if lookup fails.</documentation>
    <input message="tns:lookupUserRequest"/>
    <output message="tns:lookupUserResponse"/>
  </operation>
  <operation name="getUser">
    <documentation>ILIAS getUser(): get complete set of user data.</documentation>
    <input message="tns:getUserRequest"/>
    <output message="tns:getUserResponse"/>
  </operation>
  <operation name="updateUser">
    <documentation>ILIAS updateUser(). DEPRECATED: Use importUsers() for modifications of user data. Updates all user data. Use getUser(), then modify desired fields and finally start the updateUser() call.</documentation>
    <input message="tns:updateUserRequest"/>
    <output message="tns:updateUserResponse"/>
  </operation>
  <operation name="updatePassword">
    <documentation>ILIAS updatePassword(). Updates password of given user. Password must be MD5 hash. DEPRECATED: Use importUsers() for modifications of user data.</documentation>
    <input message="tns:updatePasswordRequest"/>
    <output message="tns:updatePasswordResponse"/>
  </operation>
  <operation name="addUser">
    <documentation>ILIAS addUser() user. DEPRECATED: Since it is not possible to add new user data fields without breaking the backward compatability, this method is deprecated. Please use importUser() instead. Add new ILIAS user. Requires complete or subset of user_data structure</documentation>
    <input message="tns:addUserRequest"/>
    <output message="tns:addUserResponse"/>
  </operation>
  <operation name="deleteUser">
    <documentation>ILIAS deleteUser(). Deletes all user related data (Bookmarks, Mails ...). DEPRECATED: Use importUsers() for deletion of user data.</documentation>
    <input message="tns:deleteUserRequest"/>
    <output message="tns:deleteUserResponse"/>
  </operation>
  <operation name="addCourse">
    <documentation>ILIAS addCourse(). Course import. See ilias_course_0_1.dtd for details about course xml structure</documentation>
    <input message="tns:addCourseRequest"/>
    <output message="tns:addCourseResponse"/>
  </operation>
  <operation name="deleteCourse">
    <documentation>ILIAS deleteCourse(). Deletes a course. Delete courses are stored in &quot;Trash&quot; and can be undeleted in  the ILIAS administration. </documentation>
    <input message="tns:deleteCourseRequest"/>
    <output message="tns:deleteCourseResponse"/>
  </operation>
  <operation name="assignCourseMember">
    <documentation>ILIAS assignCourseMember(). Assigns an user to an existing course. Type should be &quot;Admin&quot;, &quot;Tutor&quot; or &quot;Member&quot;</documentation>
    <input message="tns:assignCourseMemberRequest"/>
    <output message="tns:assignCourseMemberResponse"/>
  </operation>
  <operation name="excludeCourseMember">
    <documentation>ILIAS excludeCourseMember(). Excludes an user from an existing course.</documentation>
    <input message="tns:excludeCourseMemberRequest"/>
    <output message="tns:excludeCourseMemberResponse"/>
  </operation>
  <operation name="isAssignedToCourse">
    <documentation>ILIAS isAssignedToCourse(). Checks whether an user is assigned to a given course. Returns 0 =&gt; not assigned, 1 =&gt; course admin, 2 =&gt; course member or 3 =&gt; course tutor</documentation>
    <input message="tns:isAssignedToCourseRequest"/>
    <output message="tns:isAssignedToCourseResponse"/>
  </operation>
  <operation name="getCourseXML">
    <documentation>ILIAS getCourseXML(). Get a xml description of a specific course.</documentation>
    <input message="tns:getCourseXMLRequest"/>
    <output message="tns:getCourseXMLResponse"/>
  </operation>
  <operation name="updateCourse">
    <documentation>ILIAS updateCourse(). Update course settings, assigned members, tutors, administrators with a given xml description</documentation>
    <input message="tns:updateCourseRequest"/>
    <output message="tns:updateCourseResponse"/>
  </operation>
  <operation name="getObjIdByImportId">
    <documentation>ILIAS getObjIdByImportId(). Get the obj_id of an ILIAS obj by a given import id.</documentation>
    <input message="tns:getObjIdByImportIdRequest"/>
    <output message="tns:getObjIdByImportIdResponse"/>
  </operation>
  <operation name="getRefIdsByImportId">
    <documentation>ILIAS getRefIdsByImportId(). Get all reference ids by a given import id.</documentation>
    <input message="tns:getRefIdsByImportIdRequest"/>
    <output message="tns:getRefIdsByImportIdResponse"/>
  </operation>
  <operation name="getRefIdsByObjId">
    <documentation>ILIAS getRefIdsByObjId(). Get all reference ids by a given object id.</documentation>
    <input message="tns:getRefIdsByObjIdRequest"/>
    <output message="tns:getRefIdsByObjIdResponse"/>
  </operation>
  <operation name="getObjectByReference">
    <documentation>ILIAS getObjectByReference(). Get XML-description of an ILIAS object. If a user id is given, this methods also checks the permissions of that user on the object.</documentation>
    <input message="tns:getObjectByReferenceRequest"/>
    <output message="tns:getObjectByReferenceResponse"/>
  </operation>
  <operation name="getObjectsByTitle">
    <documentation>ILIAS getObjectsByTitle(). Get XML-description of an ILIAS object with given title. If a user id is given this method also checks the permissions of that user on the object.</documentation>
    <input message="tns:getObjectsByTitleRequest"/>
    <output message="tns:getObjectsByTitleResponse"/>
  </operation>
  <operation name="searchObjects">
    <documentation>ILIAS searchObjects(): Searches for objects. Key is within &quot;title&quot; or &quot;description&quot; Typical calls are searchObject($sid,array(&quot;lm&quot;,&quot;crs&quot;),&quot;\&quot;this and that\&quot;&quot;,&quot;and&quot;);  If an optional user id is given, this methods also return the permissions for that user on the found objects</documentation>
    <input message="tns:searchObjectsRequest"/>
    <output message="tns:searchObjectsResponse"/>
  </operation>
  <operation name="getTreeChilds">
    <documentation>ILIAS getTreeChilds(): Get all child objects of a given object.Choose array of types to filter the output. Choose empty type array to receive all object types</documentation>
    <input message="tns:getTreeChildsRequest"/>
    <output message="tns:getTreeChildsResponse"/>
  </operation>
  <operation name="getXMLTree">
    <documentation>ILIAS getXMLTree(): Returns a xml stream with the subtree objects.</documentation>
    <input message="tns:getXMLTreeRequest"/>
    <output message="tns:getXMLTreeResponse"/>
  </operation>
  <operation name="addObject">
    <documentation>ILIAS addObject. Create new object based on xml description under a given node (&quot;category,course,group or folder). Return created reference id of the new object.</documentation>
    <input message="tns:addObjectRequest"/>
    <output message="tns:addObjectResponse"/>
  </operation>
  <operation name="updateObjects">
    <documentation>ILIAS updateObjects. Update object data (title,description,owner)</documentation>
    <input message="tns:updateObjectsRequest"/>
    <output message="tns:updateObjectsResponse"/>
  </operation>
  <operation name="addReference">
    <documentation>ILIAS addReference. Create new link of given object to new object. Return the new reference id</documentation>
    <input message="tns:addReferenceRequest"/>
    <output message="tns:addReferenceResponse"/>
  </operation>
  <operation name="deleteObject">
    <documentation>ILIAS deleteObject. Stores object in trash. If multiple references exist, only the reference is deleted </documentation>
    <input message="tns:deleteObjectRequest"/>
    <output message="tns:deleteObjectResponse"/>
  </operation>
  <operation name="removeFromSystemByImportId">
    <documentation>ILIAS removeFromSystemByImportId(). Removes an object identified by its import id permanently from the system. All data will be deleted. There will be no possibility to restore it from the trash. Do not use this function for deleting roles or users. Use deleteUser() or deleteRole() instead.</documentation>
    <input message="tns:removeFromSystemByImportIdRequest"/>
    <output message="tns:removeFromSystemByImportIdResponse"/>
  </operation>
  <operation name="addUserRoleEntry">
    <documentation>ILIAS addUserRoleEntry. Assign user to role.</documentation>
    <input message="tns:addUserRoleEntryRequest"/>
    <output message="tns:addUserRoleEntryResponse"/>
  </operation>
  <operation name="deleteUserRoleEntry">
    <documentation>ILIAS deleteUserRoleEntry. Deassign user from role.</documentation>
    <input message="tns:deleteUserRoleEntryRequest"/>
    <output message="tns:deleteUserRoleEntryResponse"/>
  </operation>
  <operation name="getOperations">
    <documentation>ILIAS getOperations(): get complete set of RBAC operations.</documentation>
    <input message="tns:getOperationsRequest"/>
    <output message="tns:getOperationsResponse"/>
  </operation>
  <operation name="revokePermissions">
    <documentation>ILIAS revokePermissions(): Revoke all permissions for a specific role on an object.</documentation>
    <input message="tns:revokePermissionsRequest"/>
    <output message="tns:revokePermissionsResponse"/>
  </operation>
  <operation name="grantPermissions">
    <documentation>ILIAS grantPermissions(): Grant permissions for a specific role on an object. (Substitutes existing permission settings)</documentation>
    <input message="tns:grantPermissionsRequest"/>
    <output message="tns:grantPermissionsResponse"/>
  </operation>
  <operation name="getLocalRoles">
    <documentation>ILIAS getLocalRoles(): Get all local roles assigned to an specific object.</documentation>
    <input message="tns:getLocalRolesRequest"/>
    <output message="tns:getLocalRolesResponse"/>
  </operation>
  <operation name="getUserRoles">
    <documentation>ILIAS getUserRoles(): Get all local roles assigned to an specific user. </documentation>
    <input message="tns:getUserRolesRequest"/>
    <output message="tns:getUserRolesResponse"/>
  </operation>
  <operation name="addRole">
    <documentation>ILIAS addRole(): Creates new role under given node. &quot;target_id&quot; is the reference id of an ILIAS ILIAS object. E.g ref_id of crs,grp. If no role folder exists, a new role folder will be created.</documentation>
    <input message="tns:addRoleRequest"/>
    <output message="tns:addRoleResponse"/>
  </operation>
  <operation name="deleteRole">
    <documentation>ILIAS deleteRole(): Deletes an role and all user assignments. Fails if it is the last role of an user</documentation>
    <input message="tns:deleteRoleRequest"/>
    <output message="tns:deleteRoleResponse"/>
  </operation>
  <operation name="addRoleFromTemplate">
    <documentation>ILIAS addRole(): Creates new role under given node. &quot;target_id&quot; is the reference id of an ILIAS ILIAS object. E.g ref_id of crs,grp. If no role folder exists, a new role folder will be created. In addition to addRole the template permissions will be copied from the given role template</documentation>
    <input message="tns:addRoleFromTemplateRequest"/>
    <output message="tns:addRoleFromTemplateResponse"/>
  </operation>
  <operation name="getObjectTreeOperations">
    <documentation>ILIAS getObjectTreeOperations(): Get all granted permissions for all references of an object for a specific user. Returns array of granted operations or empty array</documentation>
    <input message="tns:getObjectTreeOperationsRequest"/>
    <output message="tns:getObjectTreeOperationsResponse"/>
  </operation>
  <operation name="addGroup">
    <documentation>ILIAS addGroup(): Add grop according to valid group XML @See ilias_group_0_1.dtd</documentation>
    <input message="tns:addGroupRequest"/>
    <output message="tns:addGroupResponse"/>
  </operation>
  <operation name="groupExists">
    <documentation>ILIAS addGroup(): Check if group with given name exists. </documentation>
    <input message="tns:groupExistsRequest"/>
    <output message="tns:groupExistsResponse"/>
  </operation>
  <operation name="getGroup">
    <documentation>ILIAS getGroup(): get xml description of grouip with given reference id.</documentation>
    <input message="tns:getGroupRequest"/>
    <output message="tns:getGroupResponse"/>
  </operation>
  <operation name="assignGroupMember">
    <documentation>ILIAS assignGroupMember(). Assigns an user to an existing group. Type should be &quot;Admin&quot;,&quot;Member&quot;</documentation>
    <input message="tns:assignGroupMemberRequest"/>
    <output message="tns:assignGroupMemberResponse"/>
  </operation>
  <operation name="excludeGroupMember">
    <documentation>ILIAS excludeGroupMember(). Excludes an user from an existing group.</documentation>
    <input message="tns:excludeGroupMemberRequest"/>
    <output message="tns:excludeGroupMemberResponse"/>
  </operation>
  <operation name="isAssignedToGroup">
    <documentation>ILIAS isAssignedToGroup(). Checks whether an user is assigned to a given group. Returns 0 =&gt; not assigned, 1 =&gt; group admin, 2 =&gt; group member</documentation>
    <input message="tns:isAssignedToGroupRequest"/>
    <output message="tns:isAssignedToGroupResponse"/>
  </operation>
  <operation name="sendMail">
    <documentation>ILIAS sendMail(): Send mime mails according to xml description. Only for internal usage Syntax, parameters may change in future releases</documentation>
    <input message="tns:sendMailRequest"/>
    <output message="tns:sendMailResponse"/>
  </operation>
  <operation name="distributeMails">
    <documentation>ILIAS distributeMails(): Distribute ILIAS mails according according to the mail setting of the recipients as ILIAS internal mail or as e-mail.</documentation>
    <input message="tns:distributeMailsRequest"/>
    <output message="tns:distributeMailsResponse"/>
  </operation>
  <operation name="ilClone">
    <documentation>ILIAS ilClone(): Only for internal usage.Syntax, parameters may change in future releases. </documentation>
    <input message="tns:ilCloneRequest"/>
    <output message="tns:ilCloneResponse"/>
  </operation>
  <operation name="handleECSTasks">
    <documentation>ILIAS handleECSTasks(): Only for internal usage.Syntax, parameters may change in future releases. </documentation>
    <input message="tns:handleECSTasksRequest"/>
    <output message="tns:handleECSTasksResponse"/>
  </operation>
  <operation name="ilCloneDependencies">
    <documentation>ILIAS ilCloneDependencies(): Only for internal usage.Syntax, parameters may change in future releases. </documentation>
    <input message="tns:ilCloneDependenciesRequest"/>
    <output message="tns:ilCloneDependenciesResponse"/>
  </operation>
  <operation name="saveQuestionResult">
    <documentation>ILIAS saveQuesionResult: Typically called from an external assessment question to save the user input. DEPRECATED since ILIAS 3.9</documentation>
    <input message="tns:saveQuestionResultRequest"/>
    <output message="tns:saveQuestionResultResponse"/>
  </operation>
  <operation name="saveQuestion">
    <documentation>ILIAS saveQuestion: Saves the result of a question in a given test pass for the active test user. The active user is identified by the active ID, which assigns a user to a test.</documentation>
    <input message="tns:saveQuestionRequest"/>
    <output message="tns:saveQuestionResponse"/>
  </operation>
  <operation name="saveQuestionSolution">
    <documentation>ILIAS saveQuestionSolution: Saves the result of a question in a given test pass for the active test user. The active user is identified by the active ID, which assigns a user to a test. The solution has to be an XML string which contains &amp;lt;values&amp;gt;&amp;lt;value&amp;gt;VALUE&amp;lt;/value&amp;gt;&amp;lt;value&amp;gt;VALUE&amp;lt;/value&amp;gt;&amp;lt;points&amp;gt;POINTS&amp;lt;/points&amp;gt;...&amp;lt;/values&amp;gt; where the triplet (value,value,points) can repeat n times. The result string is either TRUE or it contains an error message.</documentation>
    <input message="tns:saveQuestionSolutionRequest"/>
    <output message="tns:saveQuestionSolutionResponse"/>
  </operation>
  <operation name="getQuestionSolution">
    <documentation>ILIAS getQuestionSolution: Typically called from external assessment questions to retrieve the previous input of a user.</documentation>
    <input message="tns:getQuestionSolutionRequest"/>
    <output message="tns:getQuestionSolutionResponse"/>
  </operation>
  <operation name="getTestUserData">
    <documentation>ILIAS getTestUserData: Typically called from external assessment questions to retrieve data of the active user. The returned string array values are fullname, title, firstname, lastname, login.</documentation>
    <input message="tns:getTestUserDataRequest"/>
    <output message="tns:getTestUserDataResponse"/>
  </operation>
  <operation name="getPositionOfQuestion">
    <documentation>ILIAS getPositionOfQuestion: Returns the position of a given question for a given user in a given test pass.</documentation>
    <input message="tns:getPositionOfQuestionRequest"/>
    <output message="tns:getPositionOfQuestionResponse"/>
  </operation>
  <operation name="getPreviousReachedPoints">
    <documentation>ILIAS getPreviousReachedPoints: Returns an array of reached points for the previous questions in a given test pass.</documentation>
    <input message="tns:getPreviousReachedPointsRequest"/>
    <output message="tns:getPreviousReachedPointsResponse"/>
  </operation>
  <operation name="getNrOfQuestionsInPass">
    <documentation>ILIAS getNrOfQuestionsInPass: Returns the question count for a given test user in a given pass.</documentation>
    <input message="tns:getNrOfQuestionsInPassRequest"/>
    <output message="tns:getNrOfQuestionsInPassResponse"/>
  </operation>
  <operation name="getStructureObjects">
    <documentation>ILIAS getStructureObjects: delivers structure of content objects like learning modules (chapters/pages) or glossary (terms)</documentation>
    <input message="tns:getStructureObjectsRequest"/>
    <output message="tns:getStructureObjectsResponse"/>
  </operation>
  <operation name="importUsers">
    <documentation>ILIAS import users into folder id, which should be ref_id of folder or user folder (-1:System user folder, 0: checks access at user level, otherwise refid): conflict_rule: IL_FAIL_ON_CONFLICT = 1, IL_UPDATE_ON_CONFLICT = 2, IL_IGNORE_ON_CONFLICT = 3. The Return-Value is a protocol with the columns userid, login, action, message, following xmlresultset dtd. Send Account Mail = 0 deactivates sending a mail to each user, 1 activates it</documentation>
    <input message="tns:importUsersRequest"/>
    <output message="tns:importUsersResponse"/>
  </operation>
  <operation name="getRoles">
    <documentation>ILIAS getRoles():if id equals -1, get all roles specified by type (global|local|user|user_login|template or empty), if type is empty all roles with all types are delivered, if id &gt; -1 and role_type &lt;&gt; user or user_login, delivers all roles which belong to a repository object with specified ref_id, if roletype is user a numeric id is interpreted as userid, if roletype is user_login it is interpreted as login,if roletype is template all role templates will be listed</documentation>
    <input message="tns:getRolesRequest"/>
    <output message="tns:getRolesResponse"/>
  </operation>
  <operation name="getUsersForContainer">
    <documentation>ILIAS getUsersForContainer(): get all users of a specific ref_id, which can be crs, group, category or user folder (value: -1). Choose if all roles of a user should be attached (1) or not (0). set active to -1 to get all, 0, to get inactive users only, 1 to get active users only</documentation>
    <input message="tns:getUsersForContainerRequest"/>
    <output message="tns:getUsersForContainerResponse"/>
  </operation>
  <operation name="getUsersForRole">
    <documentation>ILIAS getUsersForRole(): get all users of a role with specified id, specify attach_roles to 1, to attach all role assignmnents; specify active: 1, to import active only, 0: inactive only, -1: both</documentation>
    <input message="tns:getUsersForRoleRequest"/>
    <output message="tns:getUsersForRoleResponse"/>
  </operation>
  <operation name="searchUser">
    <documentation>ILIAS searchUser(): get all users, which match a query, consisting of the keyfields, matched with values of the field values, concatenated with the logical query operator. Specify attach_roles to 1, to attach all role assignmnents; specify active: 1, to import active only, 0: inactive only, -1: both</documentation>
    <input message="tns:searchUserRequest"/>
    <output message="tns:searchUserResponse"/>
  </operation>
  <operation name="hasNewMail">
    <documentation>ILIAS hasNewMail(): Checks whether the current authenticated user has a new mail.</documentation>
    <input message="tns:hasNewMailRequest"/>
    <output message="tns:hasNewMailResponse"/>
  </operation>
  <operation name="getNIC">
    <documentation>ILIAS getNIC(): DEPRECATED: use getClientInfoXML instead. was: return client information from current client as xml result set containing installation_id, installation_version, installation_url, installation_description, installation_language_default as columns</documentation>
    <input message="tns:getNICRequest"/>
    <output message="tns:getNICResponse"/>
  </operation>
  <operation name="getExerciseXML">
    <documentation>ILIAS getExerciseXML(): returns xml description of exercise. Attachment mode: 0 - no file contents, 1 - plain content (base64encoded), 2 zlib + base64, 3 gzip + base64)</documentation>
    <input message="tns:getExerciseXMLRequest"/>
    <output message="tns:getExerciseXMLResponse"/>
  </operation>
  <operation name="addExercise">
    <documentation>ILIAS addExercise(): create exercise, put it into target (ref_id) and update exercise properties from xml (see ilias_exercise_3_8.dtd for details). Obj_id must not be set!</documentation>
    <input message="tns:addExerciseRequest"/>
    <output message="tns:addExerciseResponse"/>
  </operation>
  <operation name="updateExercise">
    <documentation>ILIAS updateExercise():update existing exercise, update exercise properties from xml (see ilias_exercise_3_8.dtd for details). obj_id in xml must match according obj id of refid.!</documentation>
    <input message="tns:updateExerciseRequest"/>
    <output message="tns:updateExerciseResponse"/>
  </operation>
  <operation name="getFileXML">
    <documentation>ILIAS getFileXML(): returns xml description of file. Attachment mode: 0 - no file contents, 1 - plain content (base64encoded), 2 zlib + base64, 3 gzip + base64)</documentation>
    <input message="tns:getFileXMLRequest"/>
    <output message="tns:getFileXMLResponse"/>
  </operation>
  <operation name="addFile">
    <documentation>ILIAS addFile(): create file, put it into target (ref_id) and update file properties from xml (see ilias_file_3_8.dtd for details). Obj_id must not be set!</documentation>
    <input message="tns:addFileRequest"/>
    <output message="tns:addFileResponse"/>
  </operation>
  <operation name="updateFile">
    <documentation>ILIAS updateFile():update existing file, update file properties from xml (see ilias_file_3_8.dtd for details). obj_id in xml must match according obj id of refid.!</documentation>
    <input message="tns:updateFileRequest"/>
    <output message="tns:updateFileResponse"/>
  </operation>
  <operation name="getUserXML">
    <documentation>ILIAS getUserXML(): get xml records for user ids, e.g. retrieved vom members of course xml. Returns user xml dtds. ids are numeric ids of user</documentation>
    <input message="tns:getUserXMLRequest"/>
    <output message="tns:getUserXMLResponse"/>
  </operation>
  <operation name="getObjIdsByRefIds">
    <documentation>ILIAS getObjIdsForRefIds: Returns a array of object ids which match the references id, given by a comma seperated string. Returns an array of ref ids, in the same order as object ids. Therefore, there might by duplicates</documentation>
    <input message="tns:getObjIdsByRefIdsRequest"/>
    <output message="tns:getObjIdsByRefIdsResponse"/>
  </operation>
  <operation name="updateGroup">
    <documentation>ILIAS updateGroup(): update existing group using ref id and group xml (see DTD).</documentation>
    <input message="tns:updateGroupRequest"/>
    <output message="tns:updateGroupResponse"/>
  </operation>
  <operation name="getIMSManifestXML">
    <documentation>ILIAS getIMSManifestXML(): returns xml of ims manifest file (scorm learning module) referred by refid</documentation>
    <input message="tns:getIMSManifestXMLRequest"/>
    <output message="tns:getIMSManifestXMLResponse"/>
  </operation>
  <operation name="hasSCORMCertificate">
    <documentation>ILIAS hasSCORMCertificate(): returns true if a certficate is available for a user referred by usr_id in a SCORM learning module referred by ref_id</documentation>
    <input message="tns:hasSCORMCertificateRequest"/>
    <output message="tns:hasSCORMCertificateResponse"/>
  </operation>
  <operation name="getSCORMCompletionStatus">
    <documentation>ILIAS getSCORMCompletionStatus(): returns a completion status of a scorm module</documentation>
    <input message="tns:getSCORMCompletionStatusRequest"/>
    <output message="tns:getSCORMCompletionStatusResponse"/>
  </operation>
  <operation name="copyObject">
    <documentation>ILIAS copyObject(): returns reference of copy, if copy is created directly, or the ref id of the target if copy is in progress.</documentation>
    <input message="tns:copyObjectRequest"/>
    <output message="tns:copyObjectResponse"/>
  </operation>
  <operation name="moveObject">
    <documentation>ILIAS moveObject(): returns true, if object with refid could be successfully moved to target id, other it raises an error.</documentation>
    <input message="tns:moveObjectRequest"/>
    <output message="tns:moveObjectResponse"/>
  </operation>
  <operation name="getTestResults">
    <documentation>ILIAS getTestResults(): returns XMLResultSet with 
									 sum only = true: user_id, login, firstname, lastname, matriculation, maximum points, received points
	 								 sum only = false: user_id, login, firstname, lastname, matriculation, question id, question title, question points, received points</documentation>
    <input message="tns:getTestResultsRequest"/>
    <output message="tns:getTestResultsResponse"/>
  </operation>
  <operation name="removeTestResults">
    <documentation>ILIAS removeTestResults(): remove test results for the chosen users</documentation>
    <input message="tns:removeTestResultsRequest"/>
    <output message="tns:removeTestResultsResponse"/>
  </operation>
  <operation name="getCoursesForUser">
    <documentation>ILIAS getTestResults(): returns XMLResultSet with columns ref_id, course xml. $parameters has to contain a column user_id and a column status. Status is a logical AND combined value of (MEMBER = 1, TUTOR = 2, ADMIN = 4, OWNER = 8) and determines which courses should be returned.</documentation>
    <input message="tns:getCoursesForUserRequest"/>
    <output message="tns:getCoursesForUserResponse"/>
  </operation>
  <operation name="getGroupsForUser">
    <documentation>ILIAS getTestResults(): returns XMLResultSet with columns ref_id, group xml. $parameters has to contain a column user_id and a column status. Status is a logical AND combined value of (MEMBER = 1, TUTOR = 2, OWNER = 4) and determines which groups should be returned.</documentation>
    <input message="tns:getGroupsForUserRequest"/>
    <output message="tns:getGroupsForUserResponse"/>
  </operation>
  <operation name="getPathForRefId">
    <documentation>ILIAS getPathForRefId(): returns XMLResultSet with columns ref_id, type and title.</documentation>
    <input message="tns:getPathForRefIdRequest"/>
    <output message="tns:getPathForRefIdResponse"/>
  </operation>
  <operation name="searchRoles">
    <documentation>ILIAS searchRoles(): returns XML following role dtd with search results for given role type and search terms.</documentation>
    <input message="tns:searchRolesRequest"/>
    <output message="tns:searchRolesResponse"/>
  </operation>
  <operation name="getInstallationInfoXML">
    <documentation>ILIAS getInstallationInfoXML(): returns XML following installation_info dtd</documentation>
    <input message="tns:getInstallationInfoXMLRequest"/>
    <output message="tns:getInstallationInfoXMLResponse"/>
  </operation>
  <operation name="getClientInfoXML">
    <documentation>ILIAS getClientInfoXML(): returns XML following installation_info dtd, contains the client the data of given client id</documentation>
    <input message="tns:getClientInfoXMLRequest"/>
    <output message="tns:getClientInfoXMLResponse"/>
  </operation>
  <operation name="getSkillCompletionDateForTriggerRefId">
    <documentation>ILIAS getSkillCompletionDateForTriggerRefId(). Get completion dates for skill trigger ref ids.</documentation>
    <input message="tns:getSkillCompletionDateForTriggerRefIdRequest"/>
    <output message="tns:getSkillCompletionDateForTriggerRefIdResponse"/>
  </operation>
  <operation name="checkSkillUserCertificateForTriggerRefId">
    <documentation>ILIAS checkSkillUserCertificateForTriggerRefId(). Check user certificates for trigger ref ids.</documentation>
    <input message="tns:checkSkillUserCertificateForTriggerRefIdRequest"/>
    <output message="tns:checkSkillUserCertificateForTriggerRefIdResponse"/>
  </operation>
  <operation name="getSkillTriggerOfAllCertificates">
    <documentation>ILIAS getSkillTriggerOfAllCertificates(). Check get all trigger with certificate for a user.</documentation>
    <input message="tns:getSkillTriggerOfAllCertificatesRequest"/>
    <output message="tns:getSkillTriggerOfAllCertificatesResponse"/>
  </operation>
  <operation name="getUserIdBySid">
    <documentation>ILIAS getUserIdBySid(): returns an ILIAS usr_id for the given sid</documentation>
    <input message="tns:getUserIdBySidRequest"/>
    <output message="tns:getUserIdBySidResponse"/>
  </operation>
  <operation name="deleteExpiredDualOptInUserObjects">
    <documentation>ILIAS deleteExpiredDualOptInUserObjects(): Deletes expired user accounts caused by unconfirmed registration links in &quot;dual opt in&quot; registration method</documentation>
    <input message="tns:deleteExpiredDualOptInUserObjectsRequest"/>
    <output message="tns:deleteExpiredDualOptInUserObjectsResponse"/>
  </operation>
  <operation name="readWebLink">
    <documentation>ILIAS readWebLink(): returns xml description of a weblink container.</documentation>
    <input message="tns:readWebLinkRequest"/>
    <output message="tns:readWebLinkResponse"/>
  </operation>
  <operation name="createWebLink">
    <documentation>ILIAS createWebLink(): create web link container, put it into target (ref_id) and update weblink container from xml (see ilias_weblink_4_0.dtd for details). Obj_id must not be set!</documentation>
    <input message="tns:createWebLinkRequest"/>
    <output message="tns:createWebLinkResponse"/>
  </operation>
  <operation name="updateWebLink">
    <documentation>ILIAS updateWebLink():update existing weblink, update weblink properties from xml (see ilias_weblink_4_0.dtd for details).</documentation>
    <input message="tns:updateWebLinkRequest"/>
    <output message="tns:updateWebLinkResponse"/>
  </operation>
  <operation name="getLearningProgressChanges">
    <documentation>ILIAS getLearningProgressChanges(): Get learning progress changes after a given timestamp.</documentation>
    <input message="tns:getLearningProgressChangesRequest"/>
    <output message="tns:getLearningProgressChangesResponse"/>
  </operation>
  <operation name="deleteProgress">
    <documentation>Delete user progress data of objects. </documentation>
    <input message="tns:deleteProgressRequest"/>
    <output message="tns:deleteProgressResponse"/>
  </operation>
</portType>
<binding name="ILIASSoapWebserviceBinding" type="tns:ILIASSoapWebservicePortType">
  <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
  <operation name="login">
    <soap:operation soapAction="urn:ilUserAdministration#login" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="loginCAS">
    <soap:operation soapAction="urn:ilUserAdministration#loginCAS" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="loginLDAP">
    <soap:operation soapAction="urn:ilUserAdministration#login" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="logout">
    <soap:operation soapAction="urn:ilUserAdministration#logout" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="lookupUser">
    <soap:operation soapAction="urn:ilUserAdministration#lookupUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUser">
    <soap:operation soapAction="urn:ilUserAdministration#getUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateUser">
    <soap:operation soapAction="urn:ilUserAdministration#updateUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updatePassword">
    <soap:operation soapAction="urn:ilUserAdministration#updatePassword" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addUser">
    <soap:operation soapAction="urn:ilUserAdministration#addUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteUser">
    <soap:operation soapAction="urn:ilUserAdministration#deleteUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addCourse">
    <soap:operation soapAction="urn:ilUserAdministration#addCourse" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteCourse">
    <soap:operation soapAction="urn:ilUserAdministration#deleteCourse" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="assignCourseMember">
    <soap:operation soapAction="urn:ilUserAdministration#assignCourseMember" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="excludeCourseMember">
    <soap:operation soapAction="urn:ilUserAdministration#excludeCourseMember" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="isAssignedToCourse">
    <soap:operation soapAction="urn:ilUserAdministration#isAssignedToCourse" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getCourseXML">
    <soap:operation soapAction="urn:ilUserAdministration#getCourseXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateCourse">
    <soap:operation soapAction="urn:ilUserAdministration#updateCourse" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getObjIdByImportId">
    <soap:operation soapAction="urn:ilUserAdministration#getCourseIdByImportId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getRefIdsByImportId">
    <soap:operation soapAction="urn:ilUserAdministration#getRefIdsByImportId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getRefIdsByObjId">
    <soap:operation soapAction="urn:ilUserAdministration#getRefIdsByObjId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getObjectByReference">
    <soap:operation soapAction="urn:ilUserAdministration#getObjectByReference" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getObjectsByTitle">
    <soap:operation soapAction="urn:ilUserAdministration#getObjectsByTitle" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="searchObjects">
    <soap:operation soapAction="urn:ilUserAdministration#searchObjects" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getTreeChilds">
    <soap:operation soapAction="urn:ilUserAdministration#getTreeChilds" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getXMLTree">
    <soap:operation soapAction="urn:ilUserAdministration#getXMLTree" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addObject">
    <soap:operation soapAction="urn:ilUserAdministration#addObject" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateObjects">
    <soap:operation soapAction="urn:ilUserAdministration#updateObjects" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addReference">
    <soap:operation soapAction="urn:ilUserAdministration#addReference" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteObject">
    <soap:operation soapAction="urn:ilUserAdministration#deleteObject" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="removeFromSystemByImportId">
    <soap:operation soapAction="urn:ilUserAdministration#removeFromSystemByImportId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addUserRoleEntry">
    <soap:operation soapAction="urn:ilUserAdministration#addUserRoleEntry" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteUserRoleEntry">
    <soap:operation soapAction="urn:ilUserAdministration#deleteUserRoleEntry" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getOperations">
    <soap:operation soapAction="urn:ilUserAdministration#getOperations" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="revokePermissions">
    <soap:operation soapAction="urn:ilUserAdministration#revokePermissions" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="grantPermissions">
    <soap:operation soapAction="urn:ilUserAdministration#grantPermissions" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getLocalRoles">
    <soap:operation soapAction="urn:ilUserAdministration#getLocalRoles" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUserRoles">
    <soap:operation soapAction="urn:ilUserAdministration#getLocalRoles" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addRole">
    <soap:operation soapAction="urn:ilUserAdministration#addRole" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteRole">
    <soap:operation soapAction="urn:ilUserAdministration#deleteRole" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addRoleFromTemplate">
    <soap:operation soapAction="urn:ilUserAdministration#addRole" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getObjectTreeOperations">
    <soap:operation soapAction="urn:ilUserAdministration#getPermissionsForObject" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addGroup">
    <soap:operation soapAction="urn:ilUserAdministration#addGroup" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="groupExists">
    <soap:operation soapAction="urn:ilUserAdministration#groupExists" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getGroup">
    <soap:operation soapAction="urn:ilUserAdministration#getGroup" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="assignGroupMember">
    <soap:operation soapAction="urn:ilUserAdministration#assignGroupMember" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="excludeGroupMember">
    <soap:operation soapAction="urn:ilUserAdministration#excludeGroupMember" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="isAssignedToGroup">
    <soap:operation soapAction="urn:ilUserAdministration#isAssignedToGroup" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="sendMail">
    <soap:operation soapAction="urn:ilUserAdministration#sendMail" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="distributeMails">
    <soap:operation soapAction="urn:ilUserAdministration#sendMail" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="ilClone">
    <soap:operation soapAction="urn:ilUserAdministration#ilClone" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="handleECSTasks">
    <soap:operation soapAction="urn:ilUserAdministration#handleECSTasks" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="ilCloneDependencies">
    <soap:operation soapAction="urn:ilUserAdministration#ilCloneDependencies" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="saveQuestionResult">
    <soap:operation soapAction="urn:ilUserAdministration#saveQuestionResult" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="saveQuestion">
    <soap:operation soapAction="urn:ilUserAdministration#saveQuestion" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="saveQuestionSolution">
    <soap:operation soapAction="urn:ilUserAdministration#saveQuestionSolution" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getQuestionSolution">
    <soap:operation soapAction="urn:ilUserAdministration#getQuestionSolution" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getTestUserData">
    <soap:operation soapAction="urn:ilUserAdministration#getTestUserData" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getPositionOfQuestion">
    <soap:operation soapAction="urn:ilUserAdministration#getPositionOfQuestion" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getPreviousReachedPoints">
    <soap:operation soapAction="urn:ilUserAdministration#getPreviousReachedPoints" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getNrOfQuestionsInPass">
    <soap:operation soapAction="urn:ilUserAdministration#getNrOfQuestionsInPass" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getStructureObjects">
    <soap:operation soapAction="urn:ilUserAdministration#getStructureObjects" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="importUsers">
    <soap:operation soapAction="urn:ilUserAdministration#importUsers" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getRoles">
    <soap:operation soapAction="urn:ilUserAdministration#getRoles" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUsersForContainer">
    <soap:operation soapAction="urn:ilUserAdministration#getUsersForContainer" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUsersForRole">
    <soap:operation soapAction="urn:ilUserAdministration#getUsersForRole" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="searchUser">
    <soap:operation soapAction="urn:ilUserAdministration#searchUsers" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="hasNewMail">
    <soap:operation soapAction="urn:ilUserAdministration#hasNewMail" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getNIC">
    <soap:operation soapAction="urn:ilUserAdministration#getNIC" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getExerciseXML">
    <soap:operation soapAction="urn:ilUserAdministration#getExerciseXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addExercise">
    <soap:operation soapAction="urn:ilUserAdministration#addExercise" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateExercise">
    <soap:operation soapAction="urn:ilUserAdministration#updateExercise" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getFileXML">
    <soap:operation soapAction="urn:ilUserAdministration#getFileXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="addFile">
    <soap:operation soapAction="urn:ilUserAdministration#addFile" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateFile">
    <soap:operation soapAction="urn:ilUserAdministration#updateFile" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUserXML">
    <soap:operation soapAction="urn:ilUserAdministration#resolveUsers" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getObjIdsByRefIds">
    <soap:operation soapAction="urn:ilUserAdministration#getRefIdsByImportId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateGroup">
    <soap:operation soapAction="urn:ilUserAdministration#updateGroup" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getIMSManifestXML">
    <soap:operation soapAction="urn:ilUserAdministration#getIMSManifestXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="hasSCORMCertificate">
    <soap:operation soapAction="urn:ilUserAdministration#hasSCORMCertificate" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getSCORMCompletionStatus">
    <soap:operation soapAction="urn:ilUserAdministration#getSCORMCompletionStatus" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="copyObject">
    <soap:operation soapAction="urn:ilUserAdministration#copyObject" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="moveObject">
    <soap:operation soapAction="urn:ilUserAdministration#moveObject" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getTestResults">
    <soap:operation soapAction="urn:ilUserAdministration#getTestResults" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="removeTestResults">
    <soap:operation soapAction="urn:ilUserAdministration#removeTestResults" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getCoursesForUser">
    <soap:operation soapAction="urn:ilUserAdministration#getCoursesForUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getGroupsForUser">
    <soap:operation soapAction="urn:ilUserAdministration#getGroupsForUser" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getPathForRefId">
    <soap:operation soapAction="urn:ilUserAdministration#getPathForRefId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="searchRoles">
    <soap:operation soapAction="urn:ilUserAdministration#searchRoles" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getInstallationInfoXML">
    <soap:operation soapAction="urn:ilUserAdministration#getInstallationInfoXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getClientInfoXML">
    <soap:operation soapAction="urn:ilUserAdministration#getClientInfoXML" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getSkillCompletionDateForTriggerRefId">
    <soap:operation soapAction="urn:ilUserAdministration#getSkillCompletionDateForTriggerRefId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="checkSkillUserCertificateForTriggerRefId">
    <soap:operation soapAction="urn:ilUserAdministration#checkSkillUserCertificateForTriggerRefId" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getSkillTriggerOfAllCertificates">
    <soap:operation soapAction="urn:ilUserAdministration#getSkillTriggerOfAllCertificates" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getUserIdBySid">
    <soap:operation soapAction="urn:ilUserAdministration#getUserIdBySid" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteExpiredDualOptInUserObjects">
    <soap:operation soapAction="urn:ilUserAdministration#deleteExpiredDualOptInUserObjects" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="readWebLink">
    <soap:operation soapAction="urn:ilUserAdministration#readWebLink" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="createWebLink">
    <soap:operation soapAction="urn:ilUserAdministration#createWebLink" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="updateWebLink">
    <soap:operation soapAction="urn:ilUserAdministration#updateWebLink" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="getLearningProgressChanges">
    <soap:operation soapAction="urn:ilUserAdministration#getLearningProgressChanges" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
  <operation name="deleteProgress">
    <soap:operation soapAction="urn:ilUserAdministration#deleteProgress" style="rpc"/>
    <input><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
    <output><soap:body use="encoded" namespace="urn:ilUserAdministration" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
  </operation>
</binding>
<service name="ILIASSoapWebservice">
  <port name="ILIASSoapWebservicePort" binding="tns:ILIASSoapWebserviceBinding">
    <soap:address location="https://mycompany.com/webservice/soap/server.php"/>
  </port>
</service>
</definitions>